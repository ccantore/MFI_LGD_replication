%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'KSHNK';
M_.dynare_version = '6.1';
oo_.dynare_version = '6.1';
options_.dynare_version = '6.1';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(4,1);
M_.exo_names_tex = cell(4,1);
M_.exo_names_long = cell(4,1);
M_.exo_names(1) = {'epsZ'};
M_.exo_names_tex(1) = {'{\epsilon^{Z}}'};
M_.exo_names_long(1) = {'Technology shock'};
M_.exo_names(2) = {'epsM'};
M_.exo_names_tex(2) = {'{\epsilon^{M}}'};
M_.exo_names_long(2) = {'Monetary Policy shock'};
M_.exo_names(3) = {'epsG'};
M_.exo_names_tex(3) = {'{\epsilon^{G}}'};
M_.exo_names_long(3) = {'Government Spending shock'};
M_.exo_names(4) = {'epsT'};
M_.exo_names_tex(4) = {'{\epsilon^{T}}'};
M_.exo_names_long(4) = {'Lump Sum Transfer shock'};
M_.endo_names = cell(95,1);
M_.endo_names_tex = cell(95,1);
M_.endo_names_long = cell(95,1);
M_.endo_names(1) = {'UCS'};
M_.endo_names_tex(1) = {'u^{\prime}(c^K)'};
M_.endo_names_long(1) = {'Marginal Utility of Consumption, Capitalists'};
M_.endo_names(2) = {'UCH'};
M_.endo_names_tex(2) = {'u^{\prime}(c^H)'};
M_.endo_names_long(2) = {'Marginal Utility of Consumption, Hand to Mouth'};
M_.endo_names(3) = {'UCN'};
M_.endo_names_tex(3) = {'u^{\prime}(c^S)'};
M_.endo_names_long(3) = {'Marginal Utility of Consumption, Savers'};
M_.endo_names(4) = {'UHH'};
M_.endo_names_tex(4) = {'u^{\prime}(n^H)'};
M_.endo_names_long(4) = {'Marginal Utility of Leisure, Hand to Mouth'};
M_.endo_names(5) = {'UHN'};
M_.endo_names_tex(5) = {'u^{\prime}(n^S)'};
M_.endo_names_long(5) = {'Marginal Utility of Leisure, Savers'};
M_.endo_names(6) = {'CS'};
M_.endo_names_tex(6) = {'c^K'};
M_.endo_names_long(6) = {'Consumption, Capitalists'};
M_.endo_names(7) = {'CH'};
M_.endo_names_tex(7) = {'c^H'};
M_.endo_names_long(7) = {'Consumption, Hand to Mouth'};
M_.endo_names(8) = {'CN'};
M_.endo_names_tex(8) = {'c^S'};
M_.endo_names_long(8) = {'Consumption, Savers'};
M_.endo_names(9) = {'HH'};
M_.endo_names_tex(9) = {'n^H'};
M_.endo_names_long(9) = {'Hours, Hand to Mouth'};
M_.endo_names(10) = {'HS'};
M_.endo_names_tex(10) = {'n^K'};
M_.endo_names_long(10) = {'Hours, Capitalists'};
M_.endo_names(11) = {'HN'};
M_.endo_names_tex(11) = {'n^S'};
M_.endo_names_long(11) = {'Hours, Savers'};
M_.endo_names(12) = {'UHS'};
M_.endo_names_tex(12) = {'u^{\prime}(n^K)'};
M_.endo_names_long(12) = {'Marginal Utility of Leisure, Capitalists'};
M_.endo_names(13) = {'H'};
M_.endo_names_tex(13) = {'n'};
M_.endo_names_long(13) = {'Aggregate Hours'};
M_.endo_names(14) = {'R'};
M_.endo_names_tex(14) = {'r'};
M_.endo_names_long(14) = {'Real Interest Rate'};
M_.endo_names(15) = {'Rn'};
M_.endo_names_tex(15) = {'R'};
M_.endo_names_long(15) = {'Nominal Interest Rate'};
M_.endo_names(16) = {'PIE'};
M_.endo_names_tex(16) = {'\Pi'};
M_.endo_names_long(16) = {'Inflation'};
M_.endo_names(17) = {'W'};
M_.endo_names_tex(17) = {'w'};
M_.endo_names_long(17) = {'Real Wage'};
M_.endo_names(18) = {'Y'};
M_.endo_names_tex(18) = {'y'};
M_.endo_names_long(18) = {'Real Output'};
M_.endo_names(19) = {'YW'};
M_.endo_names_tex(19) = {'{y^m}'};
M_.endo_names_long(19) = {'Real Wholesale Output'};
M_.endo_names(20) = {'MPL'};
M_.endo_names_tex(20) = {'mpl'};
M_.endo_names_long(20) = {'Marginal Product of Labor'};
M_.endo_names(21) = {'MC'};
M_.endo_names_tex(21) = {'mc'};
M_.endo_names_long(21) = {'Real Marginal Costs'};
M_.endo_names(22) = {'C'};
M_.endo_names_tex(22) = {'c'};
M_.endo_names_long(22) = {'Consumption'};
M_.endo_names(23) = {'Z'};
M_.endo_names_tex(23) = {'z'};
M_.endo_names_long(23) = {'Labor Augmenting shock process'};
M_.endo_names(24) = {'profits'};
M_.endo_names_tex(24) = {'d'};
M_.endo_names_long(24) = {'Profits - aggregate'};
M_.endo_names(25) = {'profitsS'};
M_.endo_names_tex(25) = {'d^K'};
M_.endo_names_long(25) = {'Profits - Capitalists'};
M_.endo_names(26) = {'LI'};
M_.endo_names_tex(26) = {'li'};
M_.endo_names_long(26) = {'Labor Income'};
M_.endo_names(27) = {'LShare'};
M_.endo_names_tex(27) = {'ls'};
M_.endo_names_long(27) = {'Labor Share'};
M_.endo_names(28) = {'K'};
M_.endo_names_tex(28) = {'{k}'};
M_.endo_names_long(28) = {'Capital Stock'};
M_.endo_names(29) = {'MPK'};
M_.endo_names_tex(29) = {'{mpk}'};
M_.endo_names_long(29) = {'Marginal Product of Capital'};
M_.endo_names(30) = {'RK'};
M_.endo_names_tex(30) = {'{r^K}'};
M_.endo_names_long(30) = {'Rental Rate of Capital'};
M_.endo_names(31) = {'I'};
M_.endo_names_tex(31) = {'{i}'};
M_.endo_names_long(31) = {'Investment'};
M_.endo_names(32) = {'IS'};
M_.endo_names_tex(32) = {'{i^K}'};
M_.endo_names_long(32) = {'Investment, Capitalists'};
M_.endo_names(33) = {'KS'};
M_.endo_names_tex(33) = {'{k^K}'};
M_.endo_names_long(33) = {'Capital Stock, Capitalists'};
M_.endo_names(34) = {'KShare'};
M_.endo_names_tex(34) = {'{ks}'};
M_.endo_names_long(34) = {'Capital Share'};
M_.endo_names(35) = {'LP'};
M_.endo_names_tex(35) = {'{lp}'};
M_.endo_names_long(35) = {'Liquidity premium'};
M_.endo_names(36) = {'S'};
M_.endo_names_tex(36) = {'{s}'};
M_.endo_names_long(36) = {'Investment Ajustment costs function'};
M_.endo_names(37) = {'X'};
M_.endo_names_tex(37) = {'{x}'};
M_.endo_names_long(37) = {'Investment today over Investment previous period'};
M_.endo_names(38) = {'Sdash'};
M_.endo_names_tex(38) = {'{s^{\prime}}'};
M_.endo_names_long(38) = {'Investment Ajustment costs function first derivative'};
M_.endo_names(39) = {'Q'};
M_.endo_names_tex(39) = {'{q}'};
M_.endo_names_long(39) = {'Tobin s Q'};
M_.endo_names(40) = {'P'};
M_.endo_names_tex(40) = {'{P}'};
M_.endo_names_long(40) = {'Price level'};
M_.endo_names(41) = {'G'};
M_.endo_names_tex(41) = {'G'};
M_.endo_names_long(41) = {'Government Spending'};
M_.endo_names(42) = {'tax'};
M_.endo_names_tex(42) = {'T'};
M_.endo_names_long(42) = {'Lump Sum Taxes'};
M_.endo_names(43) = {'taxS'};
M_.endo_names_tex(43) = {'T^U'};
M_.endo_names_long(43) = {'Lump Sum Taxes, Capitalists'};
M_.endo_names(44) = {'taxH'};
M_.endo_names_tex(44) = {'T^H'};
M_.endo_names_long(44) = {'Lump Sum Taxes, Hand to Mouth'};
M_.endo_names(45) = {'taxN'};
M_.endo_names_tex(45) = {'T^S'};
M_.endo_names_long(45) = {'Lump Sum Taxes, Savers'};
M_.endo_names(46) = {'BS'};
M_.endo_names_tex(46) = {'B^{K}'};
M_.endo_names_long(46) = {'Government bonds per capita beginning of period, Capitalists'};
M_.endo_names(47) = {'BH'};
M_.endo_names_tex(47) = {'B^{H}'};
M_.endo_names_long(47) = {'Government bonds per capita beginning of period, Hand to Mouth'};
M_.endo_names(48) = {'BN'};
M_.endo_names_tex(48) = {'B^{S}'};
M_.endo_names_long(48) = {'Government bonds per capita beginning of period, Savers'};
M_.endo_names(49) = {'ZH'};
M_.endo_names_tex(49) = {'Z^{H}'};
M_.endo_names_long(49) = {'End of period per capita real values of bonds, Hand to Mouth'};
M_.endo_names(50) = {'ZS'};
M_.endo_names_tex(50) = {'Z^{K}'};
M_.endo_names_long(50) = {'End of period per capita real values of bonds, Capitalists'};
M_.endo_names(51) = {'ZN'};
M_.endo_names_tex(51) = {'Z^{S}'};
M_.endo_names_long(51) = {'End of period per capita real values of bonds, Savers'};
M_.endo_names(52) = {'B'};
M_.endo_names_tex(52) = {'B'};
M_.endo_names_long(52) = {'Government debt'};
M_.endo_names(53) = {'SB'};
M_.endo_names_tex(53) = {'S^b'};
M_.endo_names_long(53) = {'Debt to GDP'};
M_.endo_names(54) = {'Y_obs'};
M_.endo_names_tex(54) = {'Y\_obs'};
M_.endo_names_long(54) = {'Y_obs'};
M_.endo_names(55) = {'C_obs'};
M_.endo_names_tex(55) = {'C\_obs'};
M_.endo_names_long(55) = {'C_obs'};
M_.endo_names(56) = {'H_obs'};
M_.endo_names_tex(56) = {'H\_obs'};
M_.endo_names_long(56) = {'H_obs'};
M_.endo_names(57) = {'W_obs'};
M_.endo_names_tex(57) = {'W\_obs'};
M_.endo_names_long(57) = {'W_obs'};
M_.endo_names(58) = {'PIE_obs'};
M_.endo_names_tex(58) = {'PIE\_obs'};
M_.endo_names_long(58) = {'PIE_obs'};
M_.endo_names(59) = {'R_obs'};
M_.endo_names_tex(59) = {'R\_obs'};
M_.endo_names_long(59) = {'R_obs'};
M_.endo_names(60) = {'Rn_obs'};
M_.endo_names_tex(60) = {'Rn\_obs'};
M_.endo_names_long(60) = {'Rn_obs'};
M_.endo_names(61) = {'CS_obs'};
M_.endo_names_tex(61) = {'CS\_obs'};
M_.endo_names_long(61) = {'CS_obs'};
M_.endo_names(62) = {'CH_obs'};
M_.endo_names_tex(62) = {'CH\_obs'};
M_.endo_names_long(62) = {'CH_obs'};
M_.endo_names(63) = {'P_obs'};
M_.endo_names_tex(63) = {'P\_obs'};
M_.endo_names_long(63) = {'P_obs'};
M_.endo_names(64) = {'B_obs'};
M_.endo_names_tex(64) = {'B\_obs'};
M_.endo_names_long(64) = {'B_obs'};
M_.endo_names(65) = {'ZS_obs'};
M_.endo_names_tex(65) = {'ZS\_obs'};
M_.endo_names_long(65) = {'ZS_obs'};
M_.endo_names(66) = {'G_obs'};
M_.endo_names_tex(66) = {'G\_obs'};
M_.endo_names_long(66) = {'G_obs'};
M_.endo_names(67) = {'tax_obs'};
M_.endo_names_tex(67) = {'tax\_obs'};
M_.endo_names_long(67) = {'tax_obs'};
M_.endo_names(68) = {'LI_obs'};
M_.endo_names_tex(68) = {'LI\_obs'};
M_.endo_names_long(68) = {'LI_obs'};
M_.endo_names(69) = {'LS_obs'};
M_.endo_names_tex(69) = {'LS\_obs'};
M_.endo_names_long(69) = {'LS_obs'};
M_.endo_names(70) = {'ZH_obs'};
M_.endo_names_tex(70) = {'ZH\_obs'};
M_.endo_names_long(70) = {'ZH_obs'};
M_.endo_names(71) = {'KS_obs'};
M_.endo_names_tex(71) = {'KS\_obs'};
M_.endo_names_long(71) = {'KS_obs'};
M_.endo_names(72) = {'K_obs'};
M_.endo_names_tex(72) = {'K\_obs'};
M_.endo_names_long(72) = {'K_obs'};
M_.endo_names(73) = {'I_obs'};
M_.endo_names_tex(73) = {'I\_obs'};
M_.endo_names_long(73) = {'I_obs'};
M_.endo_names(74) = {'HH_obs'};
M_.endo_names_tex(74) = {'HH\_obs'};
M_.endo_names_long(74) = {'HH_obs'};
M_.endo_names(75) = {'HS_obs'};
M_.endo_names_tex(75) = {'HS\_obs'};
M_.endo_names_long(75) = {'HS_obs'};
M_.endo_names(76) = {'HN_obs'};
M_.endo_names_tex(76) = {'HN\_obs'};
M_.endo_names_long(76) = {'HN_obs'};
M_.endo_names(77) = {'CSl_obs'};
M_.endo_names_tex(77) = {'CSl\_obs'};
M_.endo_names_long(77) = {'CSl_obs'};
M_.endo_names(78) = {'CHl_obs'};
M_.endo_names_tex(78) = {'CHl\_obs'};
M_.endo_names_long(78) = {'CHl_obs'};
M_.endo_names(79) = {'ZHl_obs'};
M_.endo_names_tex(79) = {'ZHl\_obs'};
M_.endo_names_long(79) = {'ZHl_obs'};
M_.endo_names(80) = {'ZSl_obs'};
M_.endo_names_tex(80) = {'ZSl\_obs'};
M_.endo_names_long(80) = {'ZSl_obs'};
M_.endo_names(81) = {'BH_obs'};
M_.endo_names_tex(81) = {'BH\_obs'};
M_.endo_names_long(81) = {'BH_obs'};
M_.endo_names(82) = {'BS_obs'};
M_.endo_names_tex(82) = {'BS\_obs'};
M_.endo_names_long(82) = {'BS_obs'};
M_.endo_names(83) = {'ZN_obs'};
M_.endo_names_tex(83) = {'ZN\_obs'};
M_.endo_names_long(83) = {'ZN_obs'};
M_.endo_names(84) = {'BN_obs'};
M_.endo_names_tex(84) = {'BN\_obs'};
M_.endo_names_long(84) = {'BN_obs'};
M_.endo_names(85) = {'ZNl_obs'};
M_.endo_names_tex(85) = {'ZNl\_obs'};
M_.endo_names_long(85) = {'ZNl_obs'};
M_.endo_names(86) = {'CNl_obs'};
M_.endo_names_tex(86) = {'CNl\_obs'};
M_.endo_names_long(86) = {'CNl_obs'};
M_.endo_names(87) = {'HHl_obs'};
M_.endo_names_tex(87) = {'HHl\_obs'};
M_.endo_names_long(87) = {'HHl_obs'};
M_.endo_names(88) = {'HSl_obs'};
M_.endo_names_tex(88) = {'HSl\_obs'};
M_.endo_names_long(88) = {'HSl_obs'};
M_.endo_names(89) = {'HNl_obs'};
M_.endo_names_tex(89) = {'HNl\_obs'};
M_.endo_names_long(89) = {'HNl_obs'};
M_.endo_names(90) = {'CN_obs'};
M_.endo_names_tex(90) = {'CN\_obs'};
M_.endo_names_long(90) = {'CN_obs'};
M_.endo_names(91) = {'Sconst'};
M_.endo_names_tex(91) = {'Sconst'};
M_.endo_names_long(91) = {'Sconst'};
M_.endo_names(92) = {'RK_obs'};
M_.endo_names_tex(92) = {'RK\_obs'};
M_.endo_names_long(92) = {'RK_obs'};
M_.endo_names(93) = {'LP_obs'};
M_.endo_names_tex(93) = {'LP\_obs'};
M_.endo_names_long(93) = {'LP_obs'};
M_.endo_names(94) = {'EM'};
M_.endo_names_tex(94) = {'EM'};
M_.endo_names_long(94) = {'EM'};
M_.endo_names(95) = {'Q_obs'};
M_.endo_names_tex(95) = {'Q\_obs'};
M_.endo_names_long(95) = {'Q_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(44,1);
M_.param_names_tex = cell(44,1);
M_.param_names_long = cell(44,1);
M_.param_names(1) = {'betta'};
M_.param_names_tex(1) = {'{\beta}'};
M_.param_names_long(1) = {'Discount Factor'};
M_.param_names(2) = {'sigma_c'};
M_.param_names_tex(2) = {'{\sigma}'};
M_.param_names_long(2) = {'Intertemporal elasticity of substitution'};
M_.param_names(3) = {'varrho'};
M_.param_names_tex(3) = {'{\varphi}'};
M_.param_names_long(3) = {'Inverse of Frish elasticity of Labor Supply'};
M_.param_names(4) = {'alp'};
M_.param_names_tex(4) = {'{\alpha}'};
M_.param_names_long(4) = {'capital share (exluding profits)'};
M_.param_names(5) = {'delta'};
M_.param_names_tex(5) = {'{\delta}'};
M_.param_names_long(5) = {'Capital depreciation'};
M_.param_names(6) = {'zzeta'};
M_.param_names_tex(6) = {'{\eta}'};
M_.param_names_long(6) = {'Elasticity of substitutions between intermediate goods varieties'};
M_.param_names(7) = {'rhoZ'};
M_.param_names_tex(7) = {'{\rho^{z}}'};
M_.param_names_long(7) = {'autoregressive parameter for Technology shock'};
M_.param_names(8) = {'rhoG'};
M_.param_names_tex(8) = {'{\rho^{g}}'};
M_.param_names_long(8) = {'autoregressive parameter for Government Spending shock'};
M_.param_names(9) = {'rho_r'};
M_.param_names_tex(9) = {'{\phi^{r}}'};
M_.param_names_long(9) = {'Interest rate smoothing'};
M_.param_names(10) = {'theta_pie'};
M_.param_names_tex(10) = {'{\phi^{\pi}}'};
M_.param_names_long(10) = {'Taylor rule coeff of inflation'};
M_.param_names(11) = {'theta_y'};
M_.param_names_tex(11) = {'{\phi^{y}}'};
M_.param_names_long(11) = {'Taylor rule coeff of output'};
M_.param_names(12) = {'rho_tauT'};
M_.param_names_tex(12) = {'{\phi^{\tau t}}'};
M_.param_names_long(12) = {'Tax Inertia - T'};
M_.param_names(13) = {'phi_tauT_G'};
M_.param_names_tex(13) = {'{\phi^{\tau G}}'};
M_.param_names_long(13) = {'Fiscal Policy Rule Coefficient on Output - T'};
M_.param_names(14) = {'gamma_G'};
M_.param_names_tex(14) = {'{\gamma_G}'};
M_.param_names_long(14) = {'Debt response with G'};
M_.param_names(15) = {'gamma_T'};
M_.param_names_tex(15) = {'{\gamma_T}'};
M_.param_names_long(15) = {'Debt response with T'};
M_.param_names(16) = {'tauH'};
M_.param_names_tex(16) = {'{\tau^H}'};
M_.param_names_long(16) = {'Transfer to ensure equal C s in steady state'};
M_.param_names(17) = {'F'};
M_.param_names_tex(17) = {'{F}'};
M_.param_names_long(17) = {'Fixed Costs in Production'};
M_.param_names(18) = {'rhoEM'};
M_.param_names_tex(18) = {'{\rho^{EM}}'};
M_.param_names_long(18) = {'autoregressive parameter for MP shock'};
M_.param_names(19) = {'phiX'};
M_.param_names_tex(19) = {'{\iota}'};
M_.param_names_long(19) = {'Investment adjustment costs'};
M_.param_names(20) = {'calvo'};
M_.param_names_tex(20) = {'{\theta}'};
M_.param_names_long(20) = {'calvo prices'};
M_.param_names(21) = {'xi'};
M_.param_names_tex(21) = {'{\xi}'};
M_.param_names_long(21) = {'Rotember price adj costs'};
M_.param_names(22) = {'Hss'};
M_.param_names_tex(22) = {'{\bar H}'};
M_.param_names_long(22) = {'Steady State Hours'};
M_.param_names(23) = {'PIEss'};
M_.param_names_tex(23) = {'{\bar \Pi}'};
M_.param_names_long(23) = {'Steady State Inflation'};
M_.param_names(24) = {'gy'};
M_.param_names_tex(24) = {'{\frac{\bar{G}}{\bar{Y}}}'};
M_.param_names_long(24) = {'Government Spending Output Ratio in Steady State'};
M_.param_names(25) = {'BYss'};
M_.param_names_tex(25) = {'{\frac{\bar{B}}{\bar{Y}}}'};
M_.param_names_long(25) = {'Steady State Government debt to GDP Ratio'};
M_.param_names(26) = {'LSss'};
M_.param_names_tex(26) = {'{\bar{ls}}'};
M_.param_names_long(26) = {'Steady State Labor Share'};
M_.param_names(27) = {'tauS'};
M_.param_names_tex(27) = {'{\tau^K}'};
M_.param_names_long(27) = {'Transfer to ensure equal C s in steady state'};
M_.param_names(28) = {'tauN'};
M_.param_names_tex(28) = {'{\tau^S}'};
M_.param_names_long(28) = {'Transfer to ensure equal C s in steady state'};
M_.param_names(29) = {'lambdass'};
M_.param_names_tex(29) = {'{\lambda^{CC}}'};
M_.param_names_long(29) = {'Prob of staying Capitalist'};
M_.param_names(30) = {'lambdash'};
M_.param_names_tex(30) = {'{\lambda^{CW}}'};
M_.param_names_long(30) = {'Prob of a Capitalist becoming Worker'};
M_.param_names(31) = {'lambdahs'};
M_.param_names_tex(31) = {'{\lambda^{WC}}'};
M_.param_names_long(31) = {'Prob of a Worker becoming Capitalist'};
M_.param_names(32) = {'lambdann'};
M_.param_names_tex(32) = {'{\lambda^{NN}}'};
M_.param_names_long(32) = {'Prob of staying Saver'};
M_.param_names(33) = {'PIS'};
M_.param_names_tex(33) = {'{\Pi^{K}}'};
M_.param_names_long(33) = {'Share of Capitalists'};
M_.param_names(34) = {'PIH'};
M_.param_names_tex(34) = {'{\Pi^{H}}'};
M_.param_names_long(34) = {'Share of Hand to Mouth'};
M_.param_names(35) = {'PIN'};
M_.param_names_tex(35) = {'{\Pi^{S}}'};
M_.param_names_long(35) = {'Share of Savers'};
M_.param_names(36) = {'lambdans'};
M_.param_names_tex(36) = {'{\lambda^{NC}}'};
M_.param_names_long(36) = {'Prob of a Saver becoming Capitalist'};
M_.param_names(37) = {'lambdasn'};
M_.param_names_tex(37) = {'{\lambda^{CN}}'};
M_.param_names_long(37) = {'Prob of a Capitalist becoming Saver'};
M_.param_names(38) = {'lambdahn'};
M_.param_names_tex(38) = {'{\lambda^{WN}}'};
M_.param_names_long(38) = {'Prob of a Worker becoming Saver'};
M_.param_names(39) = {'lambdanh'};
M_.param_names_tex(39) = {'{\lambda^{NW}}'};
M_.param_names_long(39) = {'Prob of a Saver becoming Worker'};
M_.param_names(40) = {'lambdahh'};
M_.param_names_tex(40) = {'{\lambda^{WW}}'};
M_.param_names_long(40) = {'Prob of staying Worker'};
M_.param_names(41) = {'nuN'};
M_.param_names_tex(41) = {'{\nu^S}'};
M_.param_names_long(41) = {'Weight on Hours in Utility, Saver'};
M_.param_names(42) = {'nuH'};
M_.param_names_tex(42) = {'{\nu^H}'};
M_.param_names_long(42) = {'Weight on Hours in Utility, Hand to Mouth'};
M_.param_names(43) = {'nuS'};
M_.param_names_tex(43) = {'{\nu^U}'};
M_.param_names_long(43) = {'Weight on Hours in Utility, Capitalists'};
M_.param_names(44) = {'nu'};
M_.param_names_tex(44) = {'{\nu}'};
M_.param_names_long(44) = {'Weight on Hours in Utility, Aggregate'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 4;
M_.endo_nbr = 95;
M_.param_nbr = 44;
M_.orig_endo_nbr = 95;
M_.aux_vars = [];
M_.Sigma_e = zeros(4, 4);
M_.Correlation_matrix = eye(4, 4);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 95;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 14 109;
 0 15 110;
 0 16 111;
 0 17 0;
 0 18 0;
 0 19 0;
 0 20 0;
 0 21 0;
 0 22 0;
 0 23 0;
 0 24 0;
 0 25 0;
 0 26 0;
 0 27 0;
 1 28 0;
 0 29 112;
 0 30 0;
 0 31 113;
 0 32 0;
 0 33 0;
 0 34 0;
 0 35 0;
 2 36 0;
 0 37 0;
 0 38 0;
 0 39 0;
 0 40 0;
 3 41 0;
 0 42 0;
 0 43 114;
 0 44 0;
 4 45 0;
 5 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 0 50 115;
 0 51 116;
 0 52 117;
 6 53 0;
 7 54 0;
 8 55 0;
 0 56 0;
 0 57 0;
 0 58 0;
 9 59 0;
 10 60 0;
 11 61 0;
 0 62 0;
 0 63 0;
 0 64 0;
 12 65 0;
 0 66 0;
 0 67 0;
 0 68 0;
 0 69 0;
 0 70 0;
 0 71 0;
 0 72 0;
 0 73 0;
 0 74 0;
 0 75 0;
 0 76 0;
 0 77 0;
 0 78 0;
 0 79 0;
 0 80 0;
 0 81 0;
 0 82 0;
 0 83 0;
 0 84 0;
 0 85 0;
 0 86 0;
 0 87 0;
 0 88 0;
 0 89 0;
 0 90 0;
 0 91 0;
 0 92 0;
 0 93 0;
 0 94 0;
 0 95 0;
 0 96 0;
 0 97 0;
 0 98 0;
 0 99 0;
 0 100 0;
 0 101 0;
 0 102 0;
 0 103 0;
 0 104 0;
 0 105 0;
 0 106 0;
 13 107 0;
 0 108 0;]';
M_.nstatic = 73;
M_.nfwrd   = 9;
M_.npred   = 13;
M_.nboth   = 0;
M_.nsfwrd   = 9;
M_.nspred   = 13;
M_.ndynamic   = 22;
M_.dynamic_tmp_nbr = [9; 5; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Marginal Utility of Consumption, Capitalists' ;
  2 , 'name' , 'Euler Equation, Capitalists' ;
  3 , 'name' , 'Marginal Utility of Leisure, Capitalists' ;
  4 , 'name' , 'Labor Supply, Aggregate' ;
  5 , 'name' , 'Hours, Capitalists' ;
  6 , 'name' , 'Bonds, Capitalists' ;
  7 , 'name' , 'Budget constraint, Capitalists' ;
  8 , 'name' , 'Marginal Utility of Consumption, Savers' ;
  9 , 'name' , 'Euler Equation, Savers' ;
  10 , 'name' , 'Marginal Utility of Leisure, Savers' ;
  11 , 'name' , 'Hours, Savers' ;
  12 , 'name' , 'Budget constraint, Savers' ;
  13 , 'name' , 'Bonds, Savers' ;
  14 , 'name' , ' Marginal Utility of Consumption, Hand to Mouth' ;
  15 , 'name' , 'Marginal Utility of Leisure, Hand to Mouth' ;
  16 , 'name' , 'Hours, Hand to Mouth' ;
  17 , 'name' , 'Bonds, Hand to Mouth 1' ;
  18 , 'name' , 'Bonds, Hand to Mouth 2' ;
  19 , 'name' , 'Consumption, Hand to Mouth' ;
  20 , 'name' , 'Cobb-Douglas Prodution function' ;
  21 , 'name' , 'Real Output' ;
  22 , 'name' , 'Marginal product of Labor' ;
  23 , 'name' , 'Real Wage' ;
  24 , 'name' , 'Profits' ;
  25 , 'name' , 'Profits - Capitalists' ;
  26 , 'name' , 'Labor Income' ;
  27 , 'name' , 'Labor Share' ;
  28 , 'name' , 'Marginal product of Capital' ;
  29 , 'name' , 'Rental rate of Capital' ;
  30 , 'name' , 'Capital Share' ;
  31 , 'name' , 'Capital Law of Montion' ;
  32 , 'name' , 'Investment today over Investment previous period' ;
  33 , 'name' , 'Convex Investment Adjustment Costs Function' ;
  34 , 'name' , 'Derivative of the Convex Investment Adjustment Costs Function' ;
  35 , 'name' , 'Capital Euler equation' ;
  36 , 'name' , 'Liquidity premium' ;
  37 , 'name' , 'Investment Equation' ;
  38 , 'name' , 'Aggregation: Investment' ;
  39 , 'name' , 'Aggregation: Capital' ;
  40 , 'name' , 'Resource Constraint' ;
  41 , 'name' , 'Fisher Equation' ;
  42 , 'name' , 'Aggregation: Consumption' ;
  43 , 'name' , 'Non-Linear Price Phillips Curve' ;
  44 , 'name' , 'Taylor Rule' ;
  45 , 'name' , 'Labor Augmenting Shock' ;
  46 , 'name' , 'Government Budget Constraint' ;
  47 , 'name' , 'Aggregation: Gov. Bonds' ;
  48 , 'name' , 'Price inflation' ;
  49 , 'name' , 'Debt to GDP' ;
  50 , 'name' , 'Government Spending Shock' ;
  51 , 'name' , 'Tax Rule' ;
  52 , 'name' , 'Tax Rule, Unonstrained' ;
  53 , 'name' , 'Tax Rule, Hand to Mouth' ;
  54 , 'name' , 'Tax Rule, Savers' ;
  55 , 'name' , 'MP Shock' ;
  56 , 'name' , 'Y_obs' ;
  57 , 'name' , 'C_obs' ;
  58 , 'name' , 'H_obs' ;
  59 , 'name' , 'W_obs' ;
  60 , 'name' , 'PIE_obs' ;
  61 , 'name' , 'R_obs' ;
  62 , 'name' , 'Rn_obs' ;
  63 , 'name' , 'RK_obs' ;
  64 , 'name' , 'CS_obs' ;
  65 , 'name' , 'CH_obs' ;
  66 , 'name' , 'CN_obs' ;
  67 , 'name' , 'HH_obs' ;
  68 , 'name' , 'HS_obs' ;
  69 , 'name' , 'HN_obs' ;
  70 , 'name' , 'P_obs' ;
  71 , 'name' , 'LP_obs' ;
  72 , 'name' , 'B_obs' ;
  73 , 'name' , 'ZH_obs' ;
  74 , 'name' , 'BS_obs' ;
  75 , 'name' , 'BH_obs' ;
  76 , 'name' , 'BN_obs' ;
  77 , 'name' , 'ZN_obs' ;
  78 , 'name' , 'ZS_obs' ;
  79 , 'name' , 'G_obs' ;
  80 , 'name' , 'tax_obs' ;
  81 , 'name' , 'LI_obs' ;
  82 , 'name' , 'LS_obs' ;
  83 , 'name' , 'KS_obs' ;
  84 , 'name' , 'K_obs' ;
  85 , 'name' , 'I_obs' ;
  86 , 'name' , 'Q_obs' ;
  87 , 'name' , 'HHl_obs' ;
  88 , 'name' , 'HSl_obs' ;
  89 , 'name' , 'HNl_obs' ;
  90 , 'name' , 'ZSl_obs' ;
  91 , 'name' , 'CSl_obs' ;
  92 , 'name' , 'CHl_obs' ;
  93 , 'name' , 'ZHl_obs' ;
  94 , 'name' , 'ZNl_obs' ;
  95 , 'name' , 'CNl_obs' ;
};
M_.mapping.UCS.eqidx = [1 2 9 35 37 43 ];
M_.mapping.UCH.eqidx = [2 9 14 ];
M_.mapping.UCN.eqidx = [2 8 9 ];
M_.mapping.UHH.eqidx = [15 ];
M_.mapping.UHN.eqidx = [10 ];
M_.mapping.CS.eqidx = [1 7 42 64 ];
M_.mapping.CH.eqidx = [14 19 42 65 ];
M_.mapping.CN.eqidx = [8 12 42 66 ];
M_.mapping.HH.eqidx = [15 16 19 67 ];
M_.mapping.HS.eqidx = [3 5 7 68 ];
M_.mapping.HN.eqidx = [10 11 12 69 ];
M_.mapping.UHS.eqidx = [3 ];
M_.mapping.H.eqidx = [4 5 11 16 20 22 24 26 27 28 58 ];
M_.mapping.R.eqidx = [2 9 36 41 61 ];
M_.mapping.Rn.eqidx = [7 12 19 41 44 46 62 ];
M_.mapping.PIE.eqidx = [41 43 44 48 60 ];
M_.mapping.W.eqidx = [4 7 12 19 23 24 26 27 59 ];
M_.mapping.Y.eqidx = [21 24 27 30 40 43 44 49 56 70 72 74 75 76 77 78 79 80 ];
M_.mapping.YW.eqidx = [20 21 ];
M_.mapping.MPL.eqidx = [22 23 ];
M_.mapping.MC.eqidx = [23 29 43 ];
M_.mapping.C.eqidx = [4 40 42 57 ];
M_.mapping.Z.eqidx = [20 22 28 45 ];
M_.mapping.profits.eqidx = [7 24 25 70 ];
M_.mapping.profitsS.eqidx = [25 ];
M_.mapping.LI.eqidx = [26 81 ];
M_.mapping.LShare.eqidx = [27 82 ];
M_.mapping.K.eqidx = [7 20 22 24 28 30 39 84 ];
M_.mapping.MPK.eqidx = [28 29 ];
M_.mapping.RK.eqidx = [7 24 29 30 35 36 63 ];
M_.mapping.I.eqidx = [38 40 85 ];
M_.mapping.IS.eqidx = [7 31 32 38 ];
M_.mapping.KS.eqidx = [31 39 ];
M_.mapping.KShare.eqidx = [30 83 ];
M_.mapping.LP.eqidx = [36 71 ];
M_.mapping.S.eqidx = [31 33 37 ];
M_.mapping.X.eqidx = [32 33 34 37 ];
M_.mapping.Sdash.eqidx = [34 37 ];
M_.mapping.Q.eqidx = [35 36 37 63 86 ];
M_.mapping.P.eqidx = [7 12 19 40 48 49 72 74 75 76 77 78 79 80 ];
M_.mapping.G.eqidx = [40 46 50 51 79 ];
M_.mapping.tax.eqidx = [46 51 52 53 54 80 ];
M_.mapping.taxS.eqidx = [7 52 ];
M_.mapping.taxH.eqidx = [19 53 ];
M_.mapping.taxN.eqidx = [12 54 ];
M_.mapping.BS.eqidx = [6 7 74 ];
M_.mapping.BH.eqidx = [18 19 75 ];
M_.mapping.BN.eqidx = [12 13 76 ];
M_.mapping.ZH.eqidx = [17 ];
M_.mapping.ZS.eqidx = [6 7 13 18 47 78 ];
M_.mapping.ZN.eqidx = [6 12 13 18 47 77 ];
M_.mapping.B.eqidx = [46 47 49 50 51 72 ];
M_.mapping.SB.eqidx = [49 ];
M_.mapping.Y_obs.eqidx = [56 ];
M_.mapping.C_obs.eqidx = [57 ];
M_.mapping.H_obs.eqidx = [58 ];
M_.mapping.W_obs.eqidx = [59 ];
M_.mapping.PIE_obs.eqidx = [60 ];
M_.mapping.R_obs.eqidx = [61 ];
M_.mapping.Rn_obs.eqidx = [62 ];
M_.mapping.CS_obs.eqidx = [64 91 ];
M_.mapping.CH_obs.eqidx = [65 92 ];
M_.mapping.P_obs.eqidx = [70 ];
M_.mapping.B_obs.eqidx = [72 ];
M_.mapping.ZS_obs.eqidx = [78 90 ];
M_.mapping.G_obs.eqidx = [79 ];
M_.mapping.tax_obs.eqidx = [80 ];
M_.mapping.LI_obs.eqidx = [81 ];
M_.mapping.LS_obs.eqidx = [82 ];
M_.mapping.ZH_obs.eqidx = [73 ];
M_.mapping.KS_obs.eqidx = [83 ];
M_.mapping.K_obs.eqidx = [84 ];
M_.mapping.I_obs.eqidx = [85 ];
M_.mapping.HH_obs.eqidx = [67 87 ];
M_.mapping.HS_obs.eqidx = [68 88 ];
M_.mapping.HN_obs.eqidx = [69 89 ];
M_.mapping.CSl_obs.eqidx = [91 ];
M_.mapping.CHl_obs.eqidx = [92 ];
M_.mapping.ZHl_obs.eqidx = [93 ];
M_.mapping.ZSl_obs.eqidx = [90 ];
M_.mapping.BH_obs.eqidx = [75 ];
M_.mapping.BS_obs.eqidx = [74 ];
M_.mapping.ZN_obs.eqidx = [77 94 ];
M_.mapping.BN_obs.eqidx = [76 ];
M_.mapping.ZNl_obs.eqidx = [94 ];
M_.mapping.CNl_obs.eqidx = [95 ];
M_.mapping.HHl_obs.eqidx = [87 ];
M_.mapping.HSl_obs.eqidx = [88 ];
M_.mapping.HNl_obs.eqidx = [89 ];
M_.mapping.CN_obs.eqidx = [66 95 ];
M_.mapping.Sconst.eqidx = [7 ];
M_.mapping.RK_obs.eqidx = [63 ];
M_.mapping.LP_obs.eqidx = [71 ];
M_.mapping.EM.eqidx = [44 55 ];
M_.mapping.Q_obs.eqidx = [86 ];
M_.mapping.epsZ.eqidx = [45 ];
M_.mapping.epsM.eqidx = [55 ];
M_.mapping.epsG.eqidx = [50 ];
M_.mapping.epsT.eqidx = [51 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 1;
M_.block_structure.block(1).mfs = 1;
M_.block_structure.block(1).equation = [ 17];
M_.block_structure.block(1).variable = [ 49];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 1;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [2 ];
M_.block_structure.block(2).Simulation_Type = 3;
M_.block_structure.block(2).endo_nbr = 1;
M_.block_structure.block(2).mfs = 1;
M_.block_structure.block(2).equation = [ 45];
M_.block_structure.block(2).variable = [ 23];
M_.block_structure.block(2).is_linear = false;
M_.block_structure.block(2).NNZDerivatives = 2;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(3).Simulation_Type = 3;
M_.block_structure.block(3).endo_nbr = 1;
M_.block_structure.block(3).mfs = 1;
M_.block_structure.block(3).equation = [ 55];
M_.block_structure.block(3).variable = [ 94];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 2;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(4).Simulation_Type = 1;
M_.block_structure.block(4).endo_nbr = 2;
M_.block_structure.block(4).mfs = 2;
M_.block_structure.block(4).equation = [ 73 93];
M_.block_structure.block(4).variable = [ 70 79];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 2;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [3 4 ];
M_.block_structure.block(5).Simulation_Type = 8;
M_.block_structure.block(5).endo_nbr = 38;
M_.block_structure.block(5).mfs = 32;
M_.block_structure.block(5).equation = [ 53 16 23 54 33 11 8 4 12 1 20 21 22 47 28 2 40 42 43 51 13 50 18 19 46 31 38 39 41 9 14 48 29 32 34 35 44 37];
M_.block_structure.block(5).variable = [ 44 9 17 45 36 11 8 22 51 6 13 19 20 50 29 14 31 7 21 42 48 41 47 40 52 33 32 28 15 3 2 16 30 37 38 1 18 39];
M_.block_structure.block(5).is_linear = false;
M_.block_structure.block(5).NNZDerivatives = 133;
M_.block_structure.block(5).bytecode_jacob_cols_to_sparse = [14 15 16 17 18 19 20 21 22 23 0 0 0 0 0 0 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 88 89 90 91 92 93 94 95 96 ];
M_.block_structure.block(6).Simulation_Type = 1;
M_.block_structure.block(6).endo_nbr = 28;
M_.block_structure.block(6).mfs = 28;
M_.block_structure.block(6).equation = [ 67 66 27 26 65 64 5 81 82 68 69 80 30 79 78 77 76 83 84 85 86 87 88 89 90 91 36 92];
M_.block_structure.block(6).variable = [ 74 90 27 26 62 61 10 68 69 75 76 67 34 66 65 83 84 71 72 73 95 87 88 89 80 77 35 78];
M_.block_structure.block(6).is_linear = true;
M_.block_structure.block(6).NNZDerivatives = 38;
M_.block_structure.block(6).bytecode_jacob_cols_to_sparse = [29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 ];
M_.block_structure.block(7).Simulation_Type = 3;
M_.block_structure.block(7).endo_nbr = 1;
M_.block_structure.block(7).mfs = 1;
M_.block_structure.block(7).equation = [ 24];
M_.block_structure.block(7).variable = [ 24];
M_.block_structure.block(7).is_linear = true;
M_.block_structure.block(7).NNZDerivatives = 1;
M_.block_structure.block(7).bytecode_jacob_cols_to_sparse = [1 ];
M_.block_structure.block(8).Simulation_Type = 1;
M_.block_structure.block(8).endo_nbr = 19;
M_.block_structure.block(8).mfs = 19;
M_.block_structure.block(8).equation = [ 94 95 6 75 74 72 71 70 63 62 61 60 59 58 57 56 3 52 49];
M_.block_structure.block(8).variable = [ 85 86 46 81 82 64 93 63 92 60 59 58 57 56 55 54 12 43 53];
M_.block_structure.block(8).is_linear = true;
M_.block_structure.block(8).NNZDerivatives = 20;
M_.block_structure.block(8).bytecode_jacob_cols_to_sparse = [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ];
M_.block_structure.block(9).Simulation_Type = 3;
M_.block_structure.block(9).endo_nbr = 1;
M_.block_structure.block(9).mfs = 1;
M_.block_structure.block(9).equation = [ 25];
M_.block_structure.block(9).variable = [ 25];
M_.block_structure.block(9).is_linear = true;
M_.block_structure.block(9).NNZDerivatives = 1;
M_.block_structure.block(9).bytecode_jacob_cols_to_sparse = [1 ];
M_.block_structure.block(10).Simulation_Type = 1;
M_.block_structure.block(10).endo_nbr = 3;
M_.block_structure.block(10).mfs = 3;
M_.block_structure.block(10).equation = [ 15 10 7];
M_.block_structure.block(10).variable = [ 4 5 91];
M_.block_structure.block(10).is_linear = true;
M_.block_structure.block(10).NNZDerivatives = 3;
M_.block_structure.block(10).bytecode_jacob_cols_to_sparse = [4 5 6 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([]);
M_.block_structure.block(4).g1_sparse_colval = int32([]);
M_.block_structure.block(4).g1_sparse_colptr = int32([]);
M_.block_structure.block(5).g1_sparse_rowval = int32([14 3 16 18 26 14 16 19 20 28 5 7 9 3 18 19 31 1 3 12 2 11 12 3 8 15 17 4 12 2 3 5 7 9 18 5 6 2 3 7 18 8 15 17 9 27 10 23 24 11 21 12 18 25 2 3 13 18 27 3 14 18 19 15 11 14 16 19 17 3 11 18 26 8 19 20 22 20 21 28 22 23 31 1 24 25 13 26 31 27 20 28 29 32 29 32 4 10 13 30 32 6 11 13 31 30 32 10 24 10 24 13 23 30 32 32 10 13 24 30 32 13 30 32 ]);
M_.block_structure.block(5).g1_sparse_colval = int32([14 15 16 17 18 19 19 19 20 21 22 22 22 23 23 23 23 33 33 33 34 34 34 35 35 35 35 36 36 37 37 37 37 37 37 38 38 39 39 39 39 40 40 40 41 41 42 42 42 43 43 44 44 44 45 45 45 45 45 46 46 46 46 47 48 48 48 48 49 50 50 50 50 51 51 52 52 53 53 53 54 55 55 56 56 57 58 58 58 59 60 60 60 60 61 61 62 62 62 62 62 63 63 63 63 64 64 88 88 89 89 90 90 91 92 93 94 94 94 94 94 95 96 96 ]);
M_.block_structure.block(5).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 6 9 10 11 14 18 18 18 18 18 18 18 18 18 18 21 24 28 30 36 38 42 45 47 50 52 55 60 64 65 69 70 74 76 78 81 82 84 86 87 90 91 95 97 102 106 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 108 110 112 114 115 116 117 122 123 125 ]);
M_.block_structure.block(6).g1_sparse_rowval = int32([]);
M_.block_structure.block(6).g1_sparse_colval = int32([]);
M_.block_structure.block(6).g1_sparse_colptr = int32([]);
M_.block_structure.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(8).g1_sparse_rowval = int32([]);
M_.block_structure.block(8).g1_sparse_colval = int32([]);
M_.block_structure.block(8).g1_sparse_colptr = int32([]);
M_.block_structure.block(9).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(9).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(9).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(10).g1_sparse_rowval = int32([]);
M_.block_structure.block(10).g1_sparse_colval = int32([]);
M_.block_structure.block(10).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 49 23 94 70 79 44 9 17 45 36 11 8 22 51 6 13 19 20 50 29 14 31 7 21 42 48 41 47 40 52 33 32 28 15 3 2 16 30 37 38 1 18 39 74 90 27 26 62 61 10 68 69 75 76 67 34 66 65 83 84 71 72 73 95 87 88 89 80 77 35 78 24 85 86 46 81 82 64 93 63 92 60 59 58 57 56 55 54 12 43 53 25 4 5 91];
M_.block_structure.equation_reordered = [ 17 45 55 73 93 53 16 23 54 33 11 8 4 12 1 20 21 22 47 28 2 40 42 43 51 13 50 18 19 46 31 38 39 41 9 14 48 29 32 34 35 44 37 67 66 27 26 65 64 5 81 82 68 69 80 30 79 78 77 76 83 84 85 86 87 88 89 90 91 36 92 24 94 95 6 75 74 72 71 70 63 62 61 60 59 58 57 56 3 52 49 25 15 10 7];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 7 15;
 7 28;
 7 46;
 12 15;
 12 48;
 19 15;
 19 47;
 20 28;
 22 28;
 24 28;
 28 28;
 30 28;
 31 33;
 32 32;
 44 15;
 45 23;
 46 15;
 46 52;
 48 40;
 50 41;
 50 52;
 51 42;
 51 52;
 55 94;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 1;
 1 6;
 2 1;
 2 14;
 3 10;
 3 12;
 4 13;
 4 17;
 4 22;
 5 10;
 5 13;
 6 46;
 6 50;
 6 51;
 7 6;
 7 10;
 7 17;
 7 24;
 7 30;
 7 32;
 7 40;
 7 43;
 7 50;
 7 91;
 8 3;
 8 8;
 9 3;
 9 14;
 10 5;
 10 11;
 11 11;
 11 13;
 12 8;
 12 11;
 12 17;
 12 40;
 12 45;
 12 51;
 13 48;
 13 50;
 13 51;
 14 2;
 14 7;
 15 4;
 15 9;
 16 9;
 16 13;
 17 49;
 18 47;
 18 50;
 18 51;
 19 7;
 19 9;
 19 17;
 19 40;
 19 44;
 20 13;
 20 19;
 20 23;
 21 18;
 21 19;
 22 13;
 22 20;
 22 23;
 23 17;
 23 20;
 23 21;
 24 13;
 24 17;
 24 18;
 24 24;
 24 30;
 25 24;
 25 25;
 26 13;
 26 17;
 26 26;
 27 13;
 27 17;
 27 18;
 27 27;
 28 13;
 28 23;
 28 29;
 29 21;
 29 29;
 29 30;
 30 18;
 30 30;
 30 34;
 31 32;
 31 33;
 31 36;
 32 32;
 32 37;
 33 36;
 33 37;
 34 37;
 34 38;
 35 1;
 35 39;
 36 14;
 36 35;
 36 39;
 37 1;
 37 36;
 37 37;
 37 38;
 37 39;
 38 31;
 38 32;
 39 28;
 39 33;
 40 18;
 40 22;
 40 31;
 40 40;
 40 41;
 41 14;
 41 15;
 42 6;
 42 7;
 42 8;
 42 22;
 43 1;
 43 16;
 43 18;
 43 21;
 44 15;
 44 16;
 44 18;
 44 94;
 45 23;
 46 41;
 46 42;
 46 52;
 47 50;
 47 51;
 47 52;
 48 16;
 48 40;
 49 18;
 49 40;
 49 52;
 49 53;
 50 41;
 51 41;
 51 42;
 52 42;
 52 43;
 53 42;
 53 44;
 54 42;
 54 45;
 55 94;
 56 18;
 56 54;
 57 22;
 57 55;
 58 13;
 58 56;
 59 17;
 59 57;
 60 16;
 60 58;
 61 14;
 61 59;
 62 15;
 62 60;
 63 39;
 63 92;
 64 6;
 64 61;
 65 7;
 65 62;
 66 8;
 66 90;
 67 9;
 67 74;
 68 10;
 68 75;
 69 11;
 69 76;
 70 24;
 70 63;
 71 35;
 71 93;
 72 40;
 72 52;
 72 64;
 73 70;
 74 40;
 74 46;
 74 82;
 75 40;
 75 47;
 75 81;
 76 40;
 76 48;
 76 84;
 77 40;
 77 51;
 77 83;
 78 40;
 78 50;
 78 65;
 79 40;
 79 41;
 79 66;
 80 40;
 80 42;
 80 67;
 81 26;
 81 68;
 82 27;
 82 69;
 83 34;
 83 71;
 84 28;
 84 72;
 85 31;
 85 73;
 86 39;
 86 95;
 87 74;
 87 87;
 88 75;
 88 88;
 89 76;
 89 89;
 90 65;
 90 80;
 91 61;
 91 77;
 92 62;
 92 78;
 93 79;
 94 83;
 94 85;
 95 86;
 95 90;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 2 1;
 2 2;
 2 3;
 9 1;
 9 2;
 9 3;
 35 1;
 35 30;
 35 39;
 36 30;
 36 39;
 37 1;
 37 37;
 37 38;
 37 39;
 41 16;
 43 1;
 43 16;
 43 18;
 63 30;
 63 39;
];
M_.block_structure.dyn_tmp_nbr = 11;
M_.state_var = [23 94 42 48 41 47 40 52 33 32 28 15 46 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(95, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(4, 1);
M_.params = NaN(44, 1);
M_.endo_trends = struct('deflator', cell(95, 1), 'log_deflator', cell(95, 1), 'growth_factor', cell(95, 1), 'log_growth_factor', cell(95, 1));
M_.NNZDerivatives = [290; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([7 12 19 44 46 45 7 20 22 24 28 30 32 31 48 50 51 7 19 12 46 50 51 55 1 2 35 37 43 14 8 9 15 10 1 7 42 64 14 19 42 65 8 12 42 66 15 16 19 67 3 5 7 68 10 11 12 69 3 4 5 11 16 20 22 24 26 27 28 58 2 9 36 41 61 41 44 62 43 44 48 60 4 7 12 19 23 24 26 27 59 21 24 27 30 40 43 44 49 56 20 21 22 23 23 29 43 4 40 42 57 20 22 28 45 7 24 25 70 25 26 81 27 82 39 84 28 29 7 24 29 30 38 40 85 7 31 32 38 31 39 30 83 36 71 31 33 37 32 33 34 37 34 37 35 36 37 63 86 7 12 19 40 48 49 72 74 75 76 77 78 79 80 40 46 50 51 79 46 51 52 53 54 80 7 52 19 53 12 54 6 74 18 75 13 76 17 6 7 13 18 47 78 6 12 13 18 47 77 46 47 49 72 49 56 57 58 59 60 61 62 64 91 65 92 70 72 78 90 79 80 81 82 73 83 84 85 67 87 68 88 69 89 91 92 93 90 75 74 77 94 76 94 95 87 88 89 66 95 7 63 71 44 55 86 2 9 35 37 43 2 9 2 9 41 43 43 35 36 63 37 37 35 36 37 63 45 55 50 51 ]);
M_.dynamic_g1_sparse_colval = int32([15 15 15 15 15 23 28 28 28 28 28 28 32 33 40 41 42 46 47 48 52 52 52 94 96 96 96 96 96 97 98 98 99 100 101 101 101 101 102 102 102 102 103 103 103 103 104 104 104 104 105 105 105 105 106 106 106 106 107 108 108 108 108 108 108 108 108 108 108 108 109 109 109 109 109 110 110 110 111 111 111 111 112 112 112 112 112 112 112 112 112 113 113 113 113 113 113 113 113 113 114 114 115 115 116 116 116 117 117 117 117 118 118 118 118 119 119 119 119 120 121 121 122 122 123 123 124 124 125 125 125 125 126 126 126 127 127 127 127 128 128 129 129 130 130 131 131 131 132 132 132 132 133 133 134 134 134 134 134 135 135 135 135 135 135 135 135 135 135 135 135 135 135 136 136 136 136 136 137 137 137 137 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 145 145 145 145 145 145 146 146 146 146 146 146 147 147 147 147 148 149 150 151 152 153 154 155 156 156 157 157 158 159 160 160 161 162 163 164 165 166 167 168 169 169 170 170 171 171 172 173 174 175 176 177 178 178 179 180 181 182 183 184 185 185 186 187 188 189 189 190 191 191 191 191 191 192 192 193 193 206 206 208 220 220 220 227 228 229 229 229 229 286 287 288 289 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 6 6 6 6 6 6 6 7 7 7 7 7 13 13 13 13 14 15 15 15 15 15 15 15 16 17 18 18 18 18 19 20 21 21 21 21 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 25 25 30 31 33 34 35 39 43 47 51 55 59 60 71 76 79 83 92 101 103 105 108 112 116 120 121 123 125 127 129 133 136 140 142 144 146 149 153 155 160 174 179 185 187 189 191 193 195 197 198 204 210 214 215 216 217 218 219 220 221 222 224 226 227 228 230 231 232 233 234 235 236 237 238 240 242 244 245 246 247 248 249 250 252 253 254 255 256 257 258 260 261 262 263 265 266 271 273 275 275 275 275 275 275 275 275 275 275 275 275 275 277 277 278 278 278 278 278 278 278 278 278 278 278 278 281 281 281 281 281 281 281 282 283 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 288 289 290 291 ]);
M_.lhs = {
'UCS'; 
'UCS'; 
'UHS'; 
'W'; 
'HS'; 
'BS'; 
'Sconst'; 
'UCN'; 
'UCN'; 
'UHN'; 
'HN'; 
'CN+ZN/P'; 
'BN'; 
'UCH'; 
'UHH'; 
'HH'; 
'ZH'; 
'BH'; 
'CH'; 
'YW'; 
'Y'; 
'MPL'; 
'W'; 
'Y'; 
'profits'; 
'LI'; 
'LShare'; 
'MPK'; 
'RK'; 
'KShare'; 
'KS'; 
'X'; 
'S'; 
'Sdash'; 
'UCS'; 
'LP'; 
'Q*(1-S-X*Sdash)+Q(1)*betta*UCS(1)/UCS*Sdash(1)*X(1)^2'; 
'I'; 
'K'; 
'Y'; 
'R'; 
'C'; 
'1-zzeta+MC*zzeta-PIE*xi*(PIE-1)+betta*xi*PIE(1)*UCS(1)/UCS*(PIE(1)-1)*Y(1)/Y'; 
'log(Rn/(Rn))'; 
'log(Z)-log((Z))'; 
'B'; 
'B'; 
'PIE'; 
'SB'; 
'log(G)-log((G))'; 
'log(tax/(tax))'; 
'taxS'; 
'taxH'; 
'taxN'; 
'log(EM)-log((EM))'; 
'Y_obs'; 
'C_obs'; 
'H_obs'; 
'W_obs'; 
'PIE_obs'; 
'R_obs'; 
'Rn_obs'; 
'RK_obs'; 
'CS_obs'; 
'CH_obs'; 
'CN_obs'; 
'HH_obs'; 
'HS_obs'; 
'HN_obs'; 
'P_obs'; 
'LP_obs'; 
'B_obs'; 
'ZH_obs'; 
'BS_obs'; 
'BH_obs'; 
'BN_obs'; 
'ZN_obs'; 
'ZS_obs'; 
'G_obs'; 
'tax_obs'; 
'LI_obs'; 
'LS_obs'; 
'KS_obs'; 
'K_obs'; 
'I_obs'; 
'Q_obs'; 
'HHl_obs'; 
'HSl_obs'; 
'HNl_obs'; 
'ZSl_obs'; 
'CSl_obs'; 
'CHl_obs'; 
'ZHl_obs'; 
'ZNl_obs'; 
'CNl_obs'; 
};
M_.static_tmp_nbr = [9; 10; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 1;
M_.block_structure_stat.block(1).endo_nbr = 4;
M_.block_structure_stat.block(1).mfs = 4;
M_.block_structure_stat.block(1).equation = [ 17 32 33 34];
M_.block_structure_stat.block(1).variable = [ 49 37 36 38];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 37];
M_.block_structure_stat.block(2).variable = [ 39];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 45];
M_.block_structure_stat.block(3).variable = [ 23];
M_.block_structure_stat.block(4).Simulation_Type = 1;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 48];
M_.block_structure_stat.block(4).variable = [ 16];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 55];
M_.block_structure_stat.block(5).variable = [ 94];
M_.block_structure_stat.block(6).Simulation_Type = 1;
M_.block_structure_stat.block(6).endo_nbr = 4;
M_.block_structure_stat.block(6).mfs = 4;
M_.block_structure_stat.block(6).equation = [ 60 73 86 93];
M_.block_structure_stat.block(6).variable = [ 58 70 95 79];
M_.block_structure_stat.block(7).Simulation_Type = 3;
M_.block_structure_stat.block(7).endo_nbr = 1;
M_.block_structure_stat.block(7).mfs = 1;
M_.block_structure_stat.block(7).equation = [ 43];
M_.block_structure_stat.block(7).variable = [ 21];
M_.block_structure_stat.block(8).Simulation_Type = 6;
M_.block_structure_stat.block(8).endo_nbr = 32;
M_.block_structure_stat.block(8).mfs = 32;
M_.block_structure_stat.block(8).equation = [ 14 54 16 1 18 19 20 21 22 23 53 9 8 51 28 29 50 31 2 12 4 35 11 47 38 39 40 41 42 13 44 46];
M_.block_structure_stat.block(8).variable = [ 2 45 9 6 47 17 13 19 28 20 44 3 8 42 29 30 41 32 14 51 22 1 11 50 31 33 40 15 7 48 18 52];
M_.block_structure_stat.block(9).Simulation_Type = 1;
M_.block_structure_stat.block(9).endo_nbr = 28;
M_.block_structure_stat.block(9).mfs = 28;
M_.block_structure_stat.block(9).equation = [ 66 67 65 5 30 27 26 64 83 68 69 82 81 80 79 78 77 84 85 87 88 89 90 91 92 6 36 94];
M_.block_structure_stat.block(9).variable = [ 90 74 62 10 34 27 26 61 71 75 76 69 68 67 66 65 83 72 73 87 88 89 80 77 78 46 35 85];
M_.block_structure_stat.block(10).Simulation_Type = 3;
M_.block_structure_stat.block(10).endo_nbr = 1;
M_.block_structure_stat.block(10).mfs = 1;
M_.block_structure_stat.block(10).equation = [ 24];
M_.block_structure_stat.block(10).variable = [ 24];
M_.block_structure_stat.block(11).Simulation_Type = 1;
M_.block_structure_stat.block(11).endo_nbr = 19;
M_.block_structure_stat.block(11).mfs = 19;
M_.block_structure_stat.block(11).equation = [ 95 76 75 74 10 72 71 70 63 62 61 59 58 57 56 52 49 7 3];
M_.block_structure_stat.block(11).variable = [ 86 84 81 82 5 64 93 63 92 60 59 57 56 55 54 43 53 91 12];
M_.block_structure_stat.block(12).Simulation_Type = 3;
M_.block_structure_stat.block(12).endo_nbr = 1;
M_.block_structure_stat.block(12).mfs = 1;
M_.block_structure_stat.block(12).equation = [ 25];
M_.block_structure_stat.block(12).variable = [ 25];
M_.block_structure_stat.block(13).Simulation_Type = 1;
M_.block_structure_stat.block(13).endo_nbr = 1;
M_.block_structure_stat.block(13).mfs = 1;
M_.block_structure_stat.block(13).equation = [ 15];
M_.block_structure_stat.block(13).variable = [ 4];
M_.block_structure_stat.variable_reordered = [ 49 37 36 38 39 23 16 94 58 70 95 79 21 2 45 9 6 47 17 13 19 28 20 44 3 8 42 29 30 41 32 14 51 22 1 11 50 31 33 40 15 7 48 18 52 90 74 62 10 34 27 26 61 71 75 76 69 68 67 66 65 83 72 73 87 88 89 80 77 78 46 35 85 24 86 84 81 82 5 64 93 63 92 60 59 57 56 55 54 43 53 91 12 25 4];
M_.block_structure_stat.equation_reordered = [ 17 32 33 34 37 45 48 55 60 73 86 93 43 14 54 16 1 18 19 20 21 22 23 53 9 8 51 28 29 50 31 2 12 4 35 11 47 38 39 40 41 42 13 44 46 66 67 65 5 30 27 26 64 83 68 69 82 81 80 79 78 77 84 85 87 88 89 90 91 92 6 36 94 24 95 76 75 74 10 72 71 70 63 62 61 59 58 57 56 52 49 7 3 25 15];
M_.block_structure_stat.incidence.sparse_IM = [
 1 1;
 1 6;
 2 1;
 2 2;
 2 3;
 2 14;
 3 10;
 3 12;
 4 13;
 4 17;
 4 22;
 5 10;
 5 13;
 6 46;
 6 50;
 6 51;
 7 6;
 7 10;
 7 15;
 7 17;
 7 24;
 7 28;
 7 30;
 7 32;
 7 40;
 7 43;
 7 46;
 7 50;
 7 91;
 8 3;
 8 8;
 9 1;
 9 2;
 9 3;
 9 14;
 10 5;
 10 11;
 11 11;
 11 13;
 12 8;
 12 11;
 12 15;
 12 17;
 12 40;
 12 45;
 12 48;
 12 51;
 13 48;
 13 50;
 13 51;
 14 2;
 14 7;
 15 4;
 15 9;
 16 9;
 16 13;
 17 49;
 18 47;
 18 50;
 18 51;
 19 7;
 19 9;
 19 15;
 19 17;
 19 40;
 19 44;
 19 47;
 20 13;
 20 19;
 20 23;
 20 28;
 21 18;
 21 19;
 22 13;
 22 20;
 22 23;
 22 28;
 23 17;
 23 20;
 23 21;
 24 13;
 24 17;
 24 18;
 24 24;
 24 28;
 24 30;
 25 24;
 25 25;
 26 13;
 26 17;
 26 26;
 27 13;
 27 17;
 27 18;
 27 27;
 28 13;
 28 23;
 28 28;
 28 29;
 29 21;
 29 29;
 29 30;
 30 18;
 30 28;
 30 30;
 30 34;
 31 32;
 31 33;
 31 36;
 32 37;
 33 36;
 33 37;
 34 37;
 34 38;
 35 1;
 35 30;
 35 39;
 36 14;
 36 30;
 36 35;
 36 39;
 37 36;
 37 37;
 37 38;
 37 39;
 38 31;
 38 32;
 39 28;
 39 33;
 40 18;
 40 22;
 40 31;
 40 40;
 40 41;
 41 14;
 41 15;
 41 16;
 42 6;
 42 7;
 42 8;
 42 22;
 43 16;
 43 21;
 44 15;
 44 16;
 44 18;
 44 94;
 45 23;
 46 15;
 46 41;
 46 42;
 46 52;
 47 50;
 47 51;
 47 52;
 48 16;
 49 18;
 49 40;
 49 52;
 49 53;
 50 41;
 50 52;
 51 41;
 51 42;
 51 52;
 52 42;
 52 43;
 53 42;
 53 44;
 54 42;
 54 45;
 55 94;
 56 18;
 56 54;
 57 22;
 57 55;
 58 13;
 58 56;
 59 17;
 59 57;
 60 16;
 60 58;
 61 14;
 61 59;
 62 15;
 62 60;
 63 30;
 63 39;
 63 92;
 64 6;
 64 61;
 65 7;
 65 62;
 66 8;
 66 90;
 67 9;
 67 74;
 68 10;
 68 75;
 69 11;
 69 76;
 70 18;
 70 24;
 70 63;
 71 35;
 71 93;
 72 18;
 72 40;
 72 52;
 72 64;
 73 70;
 74 18;
 74 40;
 74 46;
 74 82;
 75 18;
 75 40;
 75 47;
 75 81;
 76 18;
 76 40;
 76 48;
 76 84;
 77 18;
 77 40;
 77 51;
 77 83;
 78 18;
 78 40;
 78 50;
 78 65;
 79 18;
 79 40;
 79 41;
 79 66;
 80 18;
 80 40;
 80 42;
 80 67;
 81 26;
 81 68;
 82 27;
 82 69;
 83 34;
 83 71;
 84 28;
 84 72;
 85 31;
 85 73;
 86 39;
 86 95;
 87 74;
 87 87;
 88 75;
 88 88;
 89 76;
 89 89;
 90 65;
 90 80;
 91 61;
 91 77;
 92 62;
 92 78;
 93 79;
 94 83;
 94 85;
 95 86;
 95 90;
];
M_.block_structure_stat.tmp_nbr = 13;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 12 19 2 20 3 6 4 29 5 6 6 10 20 21 3 7 9 15 21 23 7 8 7 9 15 26 9 10 6 11 12 13 19 13 20 29 2 11 14 32 15 16 16 22 14 17 27 32 18 25 12 19 28 5 20 24 30 21 27 29 4 12 19 22 20 23 5 24 30 25 27 18 26 6 20 27 6 20 28 31 32 1 6 29 20 30 8 27 31 14 17 24 32 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 1 1 2 2 3 3 4 4 5 5 6 6 6 6 7 7 7 7 7 7 8 8 9 9 9 9 10 10 11 11 12 12 12 13 13 13 14 14 14 14 15 15 16 16 17 17 17 17 18 18 19 19 19 20 20 20 20 21 21 21 22 22 22 22 23 23 24 24 24 25 25 26 26 27 27 27 28 28 28 28 28 29 29 29 30 30 31 31 31 32 32 32 32 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 4 6 8 10 12 16 22 24 28 30 32 35 38 42 44 46 50 52 55 59 62 66 68 71 73 75 78 83 86 88 91 95 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(13).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(13).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(13).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([1 2 9 35 2 9 14 2 8 9 15 10 1 7 42 64 14 19 42 65 8 12 42 66 15 16 19 67 3 5 7 68 10 11 12 69 3 4 5 11 16 20 22 24 26 27 28 58 2 9 36 41 61 7 12 19 41 44 46 62 41 43 44 48 60 4 7 12 19 23 24 26 27 59 21 24 27 30 40 44 49 56 70 72 74 75 76 77 78 79 80 20 21 22 23 23 29 43 4 40 42 57 20 22 28 45 7 24 25 70 25 26 81 27 82 7 20 22 24 28 30 39 84 28 29 7 24 29 30 35 36 63 38 40 85 7 31 38 31 39 30 83 36 71 31 33 37 32 33 34 37 34 37 35 36 37 63 86 7 12 19 40 49 72 74 75 76 77 78 79 80 40 46 50 51 79 46 51 52 53 54 80 7 52 19 53 12 54 6 7 74 18 19 75 12 13 76 17 6 7 13 18 47 78 6 12 13 18 47 77 46 47 49 50 51 72 49 56 57 58 59 60 61 62 64 91 65 92 70 72 78 90 79 80 81 82 73 83 84 85 67 87 68 88 69 89 91 92 93 90 75 74 77 94 76 94 95 87 88 89 66 95 7 63 71 44 55 86 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 2 2 2 3 3 3 4 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 15 15 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 20 20 21 21 21 22 22 22 22 23 23 23 23 24 24 24 24 25 26 26 27 27 28 28 28 28 28 28 28 28 29 29 30 30 30 30 30 30 30 31 31 31 32 32 32 33 33 34 34 35 35 36 36 36 37 37 37 37 38 38 39 39 39 39 39 40 40 40 40 40 40 40 40 40 40 40 40 40 41 41 41 41 41 42 42 42 42 42 42 43 43 44 44 45 45 46 46 46 47 47 47 48 48 48 49 50 50 50 50 50 50 51 51 51 51 51 51 52 52 52 52 52 52 53 54 55 56 57 58 59 60 61 61 62 62 63 64 65 65 66 67 68 69 70 71 72 73 74 74 75 75 76 76 77 78 79 80 81 82 83 83 84 85 86 87 88 89 90 90 91 92 93 94 94 95 ]);
M_.static_g1_sparse_colptr = int32([1 5 8 11 12 13 17 21 25 29 33 37 38 49 54 61 66 75 92 94 96 99 103 107 111 112 114 116 124 126 133 136 139 141 143 145 148 152 154 159 172 177 183 185 187 189 192 195 198 199 205 211 217 218 219 220 221 222 223 224 225 227 229 230 231 233 234 235 236 237 238 239 240 241 243 245 247 248 249 250 251 252 253 255 256 257 258 259 260 261 263 264 265 266 268 269 ]);
M_.params(1) = 0.99;
betta = M_.params(1);
M_.params(5) = 0.0250;
delta = M_.params(5);
M_.params(7) = 0.75;
rhoZ = M_.params(7);
M_.params(2) = 1;
sigma_c = M_.params(2);
M_.params(3) = 1;
varrho = M_.params(3);
M_.params(19) = 2.5;
phiX = M_.params(19);
M_.params(26) = 0.67;
LSss = M_.params(26);
M_.params(6) = 6;
zzeta = M_.params(6);
s_prices_duration=3.5; 
M_.params(20) = 1-1/s_prices_duration;
calvo = M_.params(20);
M_.params(21) = M_.params(20)*(M_.params(6)-1)/((1-M_.params(20))*(1-M_.params(20)*M_.params(1)));
xi = M_.params(21);
M_.params(33) = 0.1;
PIS = M_.params(33);
M_.params(34) = 0.2;
PIH = M_.params(34);
M_.params(29) = 0.8;
lambdass = M_.params(29);
M_.params(30) = 0.02;
lambdash = M_.params(30);
M_.params(31) = 0.0541;
lambdahs = M_.params(31);
M_.params(32) = 0.95;
lambdann = M_.params(32);
M_.params(10) = 0.8;
theta_pie = M_.params(10);
M_.params(9) = 0;
rho_r = M_.params(9);
M_.params(11) = 0;
theta_y = M_.params(11);
M_.params(18) = 0.3;
rhoEM = M_.params(18);
M_.params(8) = 0.9;
rhoG = M_.params(8);
M_.params(12) = 0;
rho_tauT = M_.params(12);
M_.params(13) = 0.1;
phi_tauT_G = M_.params(13);
M_.params(14) = 0;
gamma_G = M_.params(14);
M_.params(15) = .5;
gamma_T = M_.params(15);
M_.params(23) = 1;
PIEss = M_.params(23);
M_.params(22) = .33;
Hss = M_.params(22);
M_.params(24) = 0.2;
gy = M_.params(24);
M_.params(25) = 0.57;
BYss = M_.params(25);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = (1)^2;
M_.Sigma_e(2, 2) = (1)^2;
M_.Sigma_e(3, 3) = (1/M_.params(24))^2;
M_.Sigma_e(4, 4) = (1)^2;
steady;
oo_.dr.eigval = check(M_,options_,oo_);
options_.irf = 500;
options_.nograph = true;
options_.noprint = true;
options_.order = 1;
var_list_ = {};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'KSHNK_results.mat'], 'options_mom_', '-append');
end
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
